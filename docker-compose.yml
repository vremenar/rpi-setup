version: "3"
x-logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: "5k"
    max-file: "5"
networks:
  lan:
    external: true
services:
  traefik:
    image: traefik:latest
    container_name: traefik
    env_file:
      - env-general.env
    networks:
      - lan
    ports:
      - "80:80"
      - "443:443"
      - "8181:8080"
    command:
      - "--api.dashboard=true"
      - "--providers.docker=false"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/configs/"
      - "--providers.file.watch=true"
      - "--accesslog=false"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--entryPoints.metrics.address=:8082"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.csr.acme.tlschallenge=true"
      - "--certificatesresolvers.csr.acme.email=me@myemail.com" # Change to your email
      - "--certificatesresolvers.csr.acme.storage=/letsencrypt/acme.json"
      - "--ping"
    volumes:
      - /home/pi/docker/traefik/letsencrypt:/letsencrypt
      - /home/pi/docker/traefik/configs:/configs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    logging: *default-logging
    healthcheck:
      test: ['CMD', 'traefik', 'healthcheck', '--ping']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    depends_on:
      - portainer-agent
    env_file:
      - env-general.env
    networks:
      - lan
    ports:
      - "9443:9443" # I left this port exposed on purpose if Traefik container fails so I have direct access to container management
    command: -H tcp://portainer-agent:9001 --tlsskipverify
    volumes:
      - /home/pi/docker/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    logging: *default-logging
    restart: always
  portainer-agent:
    container_name: portainer-agent
    image: portainer/agent
    env_file:
      - env-general.env
    networks:
      - lan
    environment:
      AGENT_CLUSTER_ADDR: portainer-agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
      - /:/host
    logging: *default-logging
    restart: always
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    env_file:
      - env-general.env
    networks:
      - lan
    volumes:
      - /home/pi/docker/heimdall:/config
    logging: *default-logging
    restart: always
  cloudflare-ddns:
    image: timothyjmiller/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    network_mode: host # No ports are exposed, but it has to use host networking to get public IP
    env_file:
      - env-general.env
    volumes:
      - /home/pi/docker/cloudflare-ddns/config.json:/config.json # Check Cloudflare documentation how to create a custom config.json
    logging: *default-logging
    restart: always
  no-ip2:
    image: romeupalos/noip:alpine3.16.2-2.1.9-1-arm64v8
    container_name: no-ip2 # No ports are exposed, but it has to use host networking to get public IP
    network_mode: host
    env_file:
      - env-general.env
    volumes:
      - /home/pi/docker/no-ip2/no-ip2.conf:/usr/local/etc/no-ip2.conf # Check no-ip2 documentation how to create a custom no-ip2.conf
    logging: *default-logging
    restart: always
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    networks:
      - lan
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
    dns:
      - 127.0.0.1
      - 8.8.8.8
    env_file:
      - env-general.env
      - env-pihole.env
    volumes:
      - /home/pi/docker/pihole:/etc/pihole
      - /home/pi/docker/pihole/dnsmasq.d:/etc/dnsmasq.d
    cap_add:
      - NET_ADMIN
    logging: *default-logging
    restart: always
  mongodb-unifi:
    container_name: mongodb-unifi
    image: mongo:4.1
    env_file:
      - env-general.env
    networks:
      - lan
    volumes:
      - /home/pi/docker/mongodb/unifi:/data/db
      - /home/pi/docker/mongodb/unifi/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro # Check Unifi documentation if you need custom database init, Unifi setup is provided in my repo
    logging: *default-logging
    restart: always
  unifi:
    container_name: unifi
    image: lscr.io/linuxserver/unifi-network-application:latest
    depends_on:
      - mongodb
    env_file:
      - env-general.env
      - env-unifi.env
    networks:
      - lan
    ports: # Do not change any port mappings as Unifi devices are using if for adoption process
      - "8443:8443"
      - "3478:3478/udp"
      - "10001:10001/udp"
      - "8080:8080"
      #- "1900:1900/udp" # UPnP port, used by MiniDLNA. Enable it to have an option for direct connection. If you need Unifi Cloud connection aditional 443/TCP is required.
      - "8843:8843"
      - "8880:8880"
      - "6789:6789"
      - "5514:5514/udp"
    volumes:
      - /home/pi/docker/unifi/config:/config
      - /home/pi/docker/unifi/log:/usr/lib/unifi/logs
      - /home/pi/docker/unifi/log2:/var/log/unifi
      - /home/pi/docker/unifi/run:/usr/lib/unifi/run
      - /home/pi/docker/unifi/run2:/run/unifi
      - /home/pi/docker/unifi/work:/usr/lib/unifi/work
      - /home/pi/docker/unifi/cert:/unifi/cert
    logging: *default-logging
    restart: always
  minidlna:
    container_name: minidlna
    image: vladgh/minidlna:latest
    env_file:
      - env-general.env
      - env-minidlna.env
    network_mode: 'host'
    volumes:
      - /mnt/usb/downloads/movies:/movies:z
      - /mnt/usb/downloads/series:/series:z
    logging: *default-logging
    restart: always
  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    env_file:
      - env-general.env
      - env-transmission.env
    volumes:
      - /home/pi/docker/transmission/config:/config
      - /home/pi/docker/transmission/ui/tranmissionic:/ui # Be sure to download and unpack Transmissionic UI to this location
      - /mnt/usb/downloads:/downloads:z
      - /mnt/usb/watch:/watch
      - /mnt/usb/incomplete:/incomplete
    networks:
      - lan
    ports:
      - "9091:9091"
      - "51413:51413"
      - "51413:51413/udp"
      - "61833:61833" # Make sure it is the same as PEERPORT environment variable value
      - "61833:61833/udp" # Make sure it is the same as PEERPORT environment variable value
    logging: *default-logging
    restart: always
  mariadb-nextcloud:
    image: mariadb:latest
    container_name: mariadb-nextcloud
    env_file:
      - env-general.env
      - env-mariadb-nextcloud.env
    command: --transaction-isolation=READ-COMMITTED --log-bin=binlog --binlog-format=ROW
    networks:
      - lan
    volumes:
      - /home/pi/docker/mysql/nextcloud:/var/lib/mysql
    logging: *default-logging
    restart: always
  redis-nextcloud:
    container_name: redis-nextcloud
    image: redis:latest
    env_file:
      - env-general.env
    networks:
      - lan
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - /home/pi/docker/redis/nextcloud:/data
    logging: *default-logging
    restart: always
  nextcloud:
    container_name: nextcloud
    image: nextcloud:latest
    depends_on:
      - mariadb-nextcloud
      - redis-nextcloud
    env_file:
      - env-general.env
      - env-nextcloud.env
    networks:
      - lan
    volumes:
      - /home/pi/docker/nextcloud:/var/www/html
      - /mnt/usb/nextcloud:/var/www/html/data
    logging: *default-logging
    restart: always 
  samba:
    container_name: samba
    image: dperson/samba:latest
    env_file:
      - env-general.env
      - env-samba.env
    networks:
      - lan
    ports:
      - "137:137/udp"
      - "138:138/udp"
      - "139:139/tcp"
      - "445:445/tcp"
    tmpfs:
      - /tmp
    stdin_open: true
    tty: true
    volumes:
      - /mnt/usb/downloads:/downloads:z
      - /mnt/usb/downloads/movies:/movies:z
      - /mnt/usb/downloads/series:/series:z
      - /mnt/usb/downloads/books:/books:z
      - /mnt/usb/downloads/audiobooks:/audiobooks:z
    command: '-s "Movies;/movies;yes;no;yes;all;pi;pi" -s "Series;/series;yes;no;yes;all;pi;pi" -s "Books;/books;yes;no;yes;all;pi;pi" -s "Audiobooks;/audiobooks;yes;no;yes;all;pi;pi" -s "Downloads;/downloads;yes;no;yes;all;pi;pi" -p'
    logging: *default-logging
    restart: always
  ftps:
    container_name: ftps
    image: chonjay21/ftps:latest
    env_file:
      - env-general.env
      - env-ftps.env
    networks:
      - lan
    ports:
      - "2621:21"
      - "60000-60010:60000-60010"
    volumes:
      - /mnt/usb/downloads/movies:/home/vsftpd/data/movies:z
      - /mnt/usb/downloads/series:/home/vsftpd/data/series:z
      - /mnt/usb/downloads/books:/home/vsftpd/data/books:z
      - /mnt/usb/downloads/audiobooks:/home/vsftpd/data/audiobooks:z
      - /mnt/usb/downloads:/home/vsftpd/data/downloads:z
      - /mnt/usb/backup:/home/vsftpd/data/backup
    logging: *default-logging
    restart: always
  calibre-web:
    container_name: calibre-web
    image: lscr.io/linuxserver/calibre-web:latest
    env_file:
      - env-general.env
      - env-calibre-web.env
    networks:
      - lan
    volumes:
      - /home/pi/docker/calibre-web:/config
      - /mnt/usb/downloads:/downloads:z
    logging: *default-logging
    restart: always
  calibre:
    image: lscr.io/linuxserver/calibre:latest
    container_name: calibre
    env_file:
      - env-general.env
      - env-calibre.env
    networks:
      - lan
    ports:
      - 2688:2688 # Set to CUSTOM_PORT value
      - 2689:2689 # Set to CUSTOM_HTTPS_PORT value
      - 8081:8081
    volumes:
      - /home/pi/docker/calibre:/config
      - /mnt/usb/downloads:/downloads:z
    logging: *default-logging
    restart: always
  lazylibrarian:
    image: lscr.io/linuxserver/lazylibrarian:latest
    container_name: lazylibrarian
    depends_on:
      - prowlarr
      - transmission
    env_file:
      - env-general.env
    networks:
       - lan
    volumes:
      - /home/pi/docker/lazylibrarian:/config
      - /mnt/usb/downloads:/downloads:z
    logging: *default-logging
    restart: always
  readarr:
    image: lscr.io/linuxserver/readarr:nightly
    container_name: readarr
    depends_on:
      - prowlarr
      - transmission
    env_file:
      - env-general.env
    networks:
      - lan
    volumes:
      - /home/pi/docker/readarr:/config
      - /mnt/usb/downloads:/downloads:z
    logging: *default-logging
    restart: always
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    depends_on:
      - prowlarr
      - transmission
    env_file:
      - env-general.env
    networks:
      - lan
    volumes:
      - /home/pi/docker/radarr:/config
      - /mnt/usb/downloads:/downloads:z
    logging: *default-logging
    restart: always
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    depends_on:
      - prowlarr
      - transmission
    env_file:
      - env-general.env
    networks:
      - lan
    volumes:
      - /home/pi/docker/sonarr:/config
      - /mnt/usb/downloads:/downloads:z
    logging: *default-logging
    restart: always
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    env_file:
      - env-general.env
    networks:
      - lan
    volumes:
      - /home/pi/docker/prowlarr:/config
    logging: *default-logging
    restart: always
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    env_file:
      - env-general.env
    networks:
      - lan
    volumes:
      - /home/pi/docker/bazarr:/config
      - /mnt/usb/downloads:/downloads:z
    logging: *default-logging
    restart: always
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    env_file:
      - env-general.env
      - env-plex.env
    networks:
      - lan
    ports:
      - "2696:9696"
      - "32400:32400"
      #- "1900:1900/udp" # UPnP port, enable this or unifi or minidlna
      #- "5353:5353/udp" # UPnP port, enable this or unifi or minidlna
      - "8324:8324"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "32469:32469"
    volumes:
      - /home/pi/docker/plex:/config
      - /mnt/usb/downloads/series:/series:z
      - /mnt/usb/downloads/movies:/movies:z
    logging: *default-logging
    restart: always
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    user: "1000:1000"
    env_file:
      - env-general.env
    networks:
      - lan
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - /home/pi/docker/prometheus/config:/etc/prometheus/
      - /home/pi/docker/prometheus/data:/prometheus
    logging: *default-logging
    restart: always
  node-exporter:
    container_name: node-exporter
    image: quay.io/prometheus/node-exporter:latest
    env_file:
      - env-general.env
    networks:
      - lan
    command: 
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    logging: *default-logging
    restart: always
  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:latest
    env_file:
      - env-general.env
    networks:
      - lan
    command:
      - '--config.file=/etc/alertmanager/config.yaml'
      - '--storage.path=/alertmanager'
    volumes:
      - /home/pi/docker/alertmanager:/etc/alertmanager/
    logging: *default-logging
    restart: always
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    user: "1000:1000"
    env_file:
      - env-general.env
      - env-grafana.env
    depends_on:
      - prometheus
    networks:
      - lan
    volumes:
      - /home/pi/docker/grafana/data:/var/lib/grafana
      - /home/pi/docker/grafana/provisioning/:/etc/grafana/provisioning/
    logging: *default-logging
    restart: always
  cadvisor:
    container_name: cadvisor
    image: zcube/cadvisor:latest
    env_file:
      - env-general.env
    networks:
      - lan
    command:
      - "--docker_only=true"
      - "--housekeeping_interval=30s"
      - "--disable_metrics=accelerator,cpu_topology,disk,memory_numa,tcp,udp,percpu,sched,process,hugetlb,referenced_memory,resctrl,cpuset,advtcp"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    logging: *default-logging
    restart: always
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    user: "1000:1000"
    env_file:
      - env-general.env
      - env-jellyfin.env
    networks:
      - lan
    volumes:
      - /home/pi/docker/jellyfin/config:/config
      - /home/pi/docker/jellyfin/cache:/cache
      - /mnt/usb/downloads/series:/series:z
      - /mnt/usb/downloads/movies:/movies:z
    extra_hosts:
      - "host.docker.internal:host-gateway"
    logging: *default-logging
    restart: always